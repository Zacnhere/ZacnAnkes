
user_cache = {}

@PY.UBOT("antispam")
async def _(client, message):
    chat_id = message.chat.id

    antispam_status = await db.get_vars(client.me.id, f"antispam_chat_{chat_id}")
    if not antispam_status or antispam_status != "on":
        return  # Jika antispam tidak aktif, keluar dari fungsi

    user_id = message.from_user.id
    user = await bot.get_users(user_id)
    this_user = f"[{user.first_name} {user.last_name or ''}](tg://user?id={user.id})"
    current_time = asyncio.get_event_loop().time()

    user_data = user_cache.get((user_id, chat_id))
    if not user_data:
        user_data = await db.get_user_data(user_id, chat_id) or {
            "last_message_time": 0,
            "message_count": 0,
        }
        user_cache[(user_id, chat_id)] = user_data

    if current_time - user_data["last_message_time"] < 2:
        user_data["message_count"] += 1

        if user_data["message_count"] > 2:
            btn = ikb([["| support - https://t.me/shinchilld |"]])

            await bot.send_message(
                chat_id,
                f"{this_user}\n<b>Peringatan! Jangan mengirim pesan terlalu cepat!</b>",
                reply_markup=btn,
            )

            await message.delete()

            user_data["message_count"] = 0
            user_cache[(user_id, chat_id)] = user_data
            return
    else:
        user_data["message_count"] = 1

    user_data["last_message_time"] = current_time
    user_cache[(user_id, chat_id)] = user_data

    if user_data["message_count"] == 1:
        await db.update_user_data(user_id, chat_id, user_data)
